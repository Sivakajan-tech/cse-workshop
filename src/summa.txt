#Back Off Algorithm
import java.util.random
public interface EndStation{
	carrierSense();
	transmit();
	calculateBackOFF();
}

public className EndStation_A implements EndStation implements Runnable (int speed){
	public EndStation_A (int speed){
	this.speed=speed;
}

private int speed;
private int slotTime=512;
private int backoff;
private int retry;
private int integer;
private boolean collision;

public void carrierSense(){
	Random rand= new Random();
	idle=rand.nextInt(2);
	if (idle==0){
		this.sleep(50);
	}else{
		this.transmit(collision);
	}
}

public void transmit(collision){
	if (collision==false){
		System.out.println("Transmitting. . . ");
	}else {
		if (retry < 16){
			System.out.println("Collision Detected");
			this.sleep(this.calculateBackOFF(retry));
		}else{
			System.out.println("Frame Transmission_Discarded");
		}
	}
}

public int calculateBackOFF(int retry){
	Random r =new Random();
	int k = min(retry,10);
	integer = r.nextInt(2*k);
	retry += 1;
	backOFF= int((slotTime*integer)/speed)
	return backOFF;
}

public void run(){
	this.carrierSense();
}

public void set_Coll(boolean t){
	this.collision=t;
}

public void Test{
	public static void main(string args[]){
		EndStation_A stationA = new EndStation_A(500);
		Thread station_A = new Thread(stationA);
		station_A.set_Coll(false);
		stationA.start();
		station_A.set_Coll(true);
	}
}